trigger:
- '*'

pool:
  vmImage: 'ubuntu-16.04'
  demands:
    - npm

variables:
  buildConfiguration: 'Release'
  wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
  dotnetSdkVersion: '3.1.100'

steps:
- task: UseDotNet@2
  displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
  inputs:
    version: '$(dotnetSdkVersion)'

- task: Npm@1
  displayName: 'Run npm install'
  inputs:
    verbose: false

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # RELEASENOTES
      
      **Release Name** :  ${releaseDetails.releaseDefinition.name}
      **Release Number** : ${releaseDetails.name}
      **Release Completed** : ${releaseDetails.modifiedOn}
      **Compared Release Number** : ${compareReleaseDetails.name}
      **Build Number** - $(Build.BuildNumber) 
      **Build Id** - $(Build.DefinitionId) 
      **Build Source Branch** - $(Build.SourceBranchName) 
      **Build Type** - $(Build.Type) 
      
      ### DESCRIPTION
      @@WILOOP:RN-OVERVIEW@@
      ${widetail.fields['System.Description']}
      @@WILOOP:RN-OVERVIEW@@
      
      ### FEATURES
      @@WILOOP:RN-FEATURES@@
      ${widetail.fields['System.Description']}
      @@WILOOP:RN-FEATURES@@
      
      ### Associated work items
      @@WILOOP@@
      * **${widetail.fields['System.WorkItemType']} #${widetail.id}** Assigned by: ${widetail.fields['System.AssignedTo']} - ${widetail.fields['System.Title']}
      @@WILOOP@@
      
      ### Associated commits
      @@CSLOOP@@
      * **ID ${csdetail.id} ** ${csdetail.message}
      @@CSLOOP@@
    errorActionPreference: 'silentlyContinue'

- script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
  displayName: 'Compile Sass assets'

- task: gulp@1
  displayName: 'Run gulp tasks'

- script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
  displayName: 'Write build info'
  workingDirectory: $(wwwrootDir)

- task: DotNetCoreCLI@2
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build the project - $(buildConfiguration)'
  inputs:
    command: 'build'
    arguments: '--no-restore --configuration $(buildConfiguration)'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Publish the project - $(buildConfiguration)'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  condition: succeeded()