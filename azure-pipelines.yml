trigger:
- '*'

pool:
  vmImage: 'ubuntu-16.04'
  demands:
    - npm

variables:
  buildConfiguration: 'Release'
  wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
  dotnetSdkVersion: '3.1.100'

steps:
- task: CmdLine@2
  displayName: 'Configure'
  inputs:
    script: |
      echo $(build.artifactstagingdirectory)
      echo $(build.artifactstagingdirectory)
      echo $(build.artifactstagingdirectory)
      echo $(Release.DefinitionName)
      echo $(build.artifactstagingdirectory)
      echo $(Release.EnvironmentName)
      echo $(build.artifactstagingdirectory)
      echo $(Release.ReleaseName)
      echo $(Agent.ReleaseDirectory)

- task: UseDotNet@2
  displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
  inputs:
    version: '$(dotnetSdkVersion)'

- task: Npm@1
  displayName: 'Run npm install'
  inputs:
    verbose: false

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      #Release notes for build $defname  
      **Build Number**  : $($build.buildnumber)    
      **Build started** : $("{0:dd/MM/yy HH:mm:ss}" -f [datetime]$build.startTime)     
      **Source Branch** : $($build.sourceBranch)  
      
      ###Associated change sets/commits  
      @@CSLOOP@@  
      * **ID $($csdetail.changesetid)$($csdetail.commitid)** $($csdetail.comment)    
      @@CSLOOP@@
    errorActionPreference: 'silentlyContinue'

- script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
  displayName: 'Compile Sass assets'

- task: gulp@1
  displayName: 'Run gulp tasks'

- script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
  displayName: 'Write build info'
  workingDirectory: $(wwwrootDir)

- task: DotNetCoreCLI@2
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build the project - $(buildConfiguration)'
  inputs:
    command: 'build'
    arguments: '--no-restore --configuration $(buildConfiguration)'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Publish the project - $(buildConfiguration)'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  condition: succeeded()